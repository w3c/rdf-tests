!!! 5
%html{lang: :en, prefix: "dawg:   http://www.w3.org/2001/sw/DataAccess/tests/test-dawg# mf: http://www.w3.org/2001/sw/DataAccess/tests/test-manifest# cnt: http://www.w3.org/2011/content# ht: http://www.w3.org/2011/http#"}
  %head
    %meta{"http-equiv" => "Content-Type", content: "text/html;charset=utf-8"}
    %meta{name: "viewport", content: "width=device-width, initial-scale=1.0"}
    %link{rel: "stylesheet", type: "text/css", href: "https://www.w3.org/StyleSheets/TR/base"}
    :css
      body {background-image: none;}
      dl.editor>dd {
        margin: 0 0 0 40px;
      }
      dl.test-detail {
        padding: 0.5em;
      }
      dl.test-detail>dt {
        float: left;
        clear: left;
        text-align: right;
        font-weight: bold;
        color: green;
      }
      dl.test-detail>dt:after {content: ": "}
      dl.test-detail>dd {
        margin: 0 0 0 110px;
        padding: 0 0 0.5em 0;
      }
      dl.test-description>dt {margin-top: 2em;}
      dd {margin-left: 0;}
      dd code {display: inline;}
      pre.code {margin-left: 0;}
      footer {text-align: center;}
    %title
      = man['label']
    :css
      em.rfc2119 { 
        text-transform: lowercase;
        font-variant:   small-caps;
        font-style:     normal;
        color:          #900;
      }
      a.testlink {
        color: inherit;
        text-decoration: none;
      }
      a.testlink:hover {
        text-decoration: underline;
      }
      .warning {color: orange;}
      .error {color: red;}

  %body{resource: man['@id'], typeof: man['@type']}
    %p
      %a{href: "http://www.w3.org/"}
        %img{src: "http://www.w3.org/Icons/w3c_home", alt: "W3C", height: 48, width: 72}
    %h1{property: "rdfs:label"}<= man['label']
    :markdown
      [Copyright](http://www.w3.org/Consortium/Legal/ipr-notice#Copyright) © 2010 [<acronym title="World Wide Web Consortium">W3C</acronym>](http://www.w3.org/)<sup>®</sup> ([<acronym title="Massachusetts Institute of Technology">MIT</acronym>](http://www.csail.mit.edu/), [<acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym>](http://www.ercim.org/), [Keio](http://www.keio.ac.jp/)), All Rights Reserved. W3C [liability](http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer), [trademark](http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks), and [document use](http://www.w3.org/Consortium/Legal/copyright-documents) rules apply.
    %hr{title: "Separator for header"}

    %div
      %h2{id: "abstract"}="Abstract"
      %p{property: "rdfs:comment"}
        = Array(man['comment']).join(' ').gsub(/\s+/m, ' ').strip.gsub(/(MUST|SHOULD|MAY)/, '<em class="rfc2119">\\1</em>')
      :markdown
        This page describes W3C SPARQL Working Group's SPARQL 1.0 test suite.

        **$HOST$**
        :   is the host where the Graph Store Protocol implementation is listening

        **$GRAPHSTORE$**
        :   is the path of the URL of the graph store

        **$NEWPATH$**
        :   is the URL returned in the Location HTTP header

        The Turtle and JSON-LD versions of this manifest use the [`ht`](http://www.w3.org/2011/http#)
        and [`cnt`](http://www.w3.org/2011/content#) to describe the
        HTTP actions that a test client can use to provision call and response
        that a server will use to run each test.
        This includes a sequence of HTTP requests, with headers and other information
        that can be used for the provisioned client to will use to send HTTP methods
        to the system under test along with the expected response.

        For example, the following entry for `gsp:delete__existing_graph`
        has an action described as an `ht:Connection`, with the authority `"www.example"`
        and a sequence of requests having a single entry of type `ht:Request`,
        an `ht:absolutePath` of `"$GRAPHSTORE$/person/2.ttl"` (where the
        test runner will substitute `$GRAPHSTORE` with the path to the graph store service
        being tested), and the expected response:

            gsp:delete__existing_graph a mf:mf:GraphStoreProtocolTest;
              dawg:approval dawg:Approved;
              dawg:approvedBy <http://www.w3.org/2009/sparql/meeting/2012-11-20#resolution_3>;
              mf:action [
                a ht:Connection;
                ht:connectionAuthority "www.example";
                ht:requests ([
                    a ht:Request;
                    ht:absolutePath "$GRAPHSTORE$/person/2.ttl";
                    ht:headers ([
                        a ht:RequestHeader;
                        ht:fieldName "Host";
                        ht:fieldValue "$HOST$";
                        ht:headerElements ([
                            a ht:HeaderElement;
                            ht:elementName "$HOST$"
                          ])
                      ]);
                    ht:httpVersion "1.1";
                    ht:methodName "DELETE";
                    ht:resp [
                      a ht:Response;
                      ht:statusCodeValue "200"
                    ]
                  ])
              ];
              mf:name "DELETE - existing graph" .

          This is rendered into HTTP envelopes:

          **Request**

          DELETE $GRAPHSTORE$/person/2.ttl HTTP/1.1
          Host: www.example
          Host: $HOST$

          **Response**

          200 response
          
      %h3#contributing-tests="Contributing Tests"
      :markdown
        The test manifests and entries are built automatically from [manifest.ttl](manifest.ttl) using a Rake task. Tests may be contributed via pull request to [https://github.com/w3c/rdf-tests](https://github.com/w3c/rdf-tests) with suitable changes to the [manifest.ttl](manifest.ttl) and referenced files.

      %h3#distribution="Distribution"
      :markdown
        Distributed under both the [W3C Test Suite License](http://www.w3.org/Consortium/Legal/2008/04-testsuite-license) and the [W3C 3-clause BSD License](http://www.w3.org/Consortium/Legal/2008/03-bsd-license). To contribute to a W3C Test Suite, see the [policies and contribution forms](http://www.w3.org/2004/10/27-testcases).

      %h3#disclaimer="Disclaimer"
      :markdown
        UNDER BOTH MUTUALLY EXCLUSIVE LICENSES, THIS DOCUMENT AND ALL DOCUMENTS, TESTS AND SOFTWARE THAT LINK THIS STATEMENT ARE PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
        COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS THEREOF.

    - if man['include']
      %div
        %h2
          Referenced Manifests
        %ul
          - Array(man['include']).map{|m| m.sub('manifest.ttl', '')}.sort.each do |uri|
            %li
              %a{property: 'mf:include', inlist: true, href: "#{uri}index.html"}=uri

    - if man['entries']
      %div
        %h2
          Test Descriptions
        %dl.test-description
          - man['entries'].each do |test|
            - test_id = test['@id'].split('#').last
            %dt{id: test_id}
              %a.testlink{href: "##{test_id}"}
                = "#{test_id}:"
              %span{about: test['@id'], property: "mf:name"}<~test['name']
            %dd{property: "mf:entry", inlist: true, resource: test['@id'], typeof: test['@type']}
              %dl.test-detail
                %dt="type"
                %dd<~test['@type']
                %dt="approval"
                %dd{property: "mf:approval", resource: test['approval']}<~test['approval']
                - # Syntax Tests
                - if test['approvedBy']
                  %dt="approvedBy"
                  %dd
                    %a{property: "dawg:approvedBy", href: test['approvedBy']}<~test['approvedBy']
              - # Evaluation Tests
              - if test['action'].is_a?(Hash)
                %div.test-detail{property: "mf:action", typeof: test['action']['@type']}
                  %meta{property: "ht:connectionAuthority", value: test['action']['ht:connectionAuthority']}
                  %div{property: 'ht:requests', inlist: true}
                    - test['action']['requests'].each_with_index do |request, ndx|
                      - response = request['ht:resp']
                      - if ndx > 0
                        %br
                        %div
                          followed by
                      %div{typeof: request['@type']}
                        %h4 Request
                        %code
                          %span{property: 'ht:methodName'}<=request['ht:methodName']
                          %span{property: 'ht:absolutePath'}&=request['ht:absolutePath']
                          HTTP/
                          %span{property: 'ht:absolutePath'}<>=request['ht:httpVersion']
                          %br
                          %span<="Host: " + test['action']['ht:connectionAuthority']
                          %br
                          - if request['headers']
                            %span{property: 'ht:headers', inlist: true}
                              - request['headers'].each do |header|
                                %div{typeof: header['@type']}
                                  %meta{property: 'ht:fieldValue', value: header['ht:fieldValue']}
                                  %span{property: 'ht:fieldName'}<>= header['ht:fieldName']
                                  = ': '
                                  %span{property: 'ht:headerElements', inlist: true}
                                    - header['headerElements'].each_with_index do |he, hendx|
                                      - if hendx > 0
                                        %span or
                                      %span{typeof: he['@type']}
                                        %span{property: 'ht:elementName'}<>= he['ht:elementName']
                                        - Array(he['params']).each do |param|
                                          = "; "
                                          %span{property: 'ht:params', typeof: param['@type'], inlist: true}
                                            %span{property: 'ht:paramName'}<>= param['ht:paramName']
                                            = "="
                                            %span{property: 'ht:paramValue'}<>= param['ht:paramValue']
                          - if request['ht:body']
                            %br
                            %div{property: 'ht:body', typeof: request['ht:body']['@type']}
                              %meta{property: 'cnt:characterEncoding', value: request['ht:body']['cnt:characterEncoding']}
                              %pre.code{property: 'cnt:chars'}&= request['ht:body']['cnt:chars']
                      %div{typeof: response['@type']}
                        %h4 Response
                        %code
                          - response['ht:statusCodeValue'].each_with_index do |s, sndx|
                            - if sndx > 0
                              = "or"
                            %span{property: 'ht:statusCodeValue'}<=s
                          %span
                            response
                          - if response['headers']
                            %span{property: 'ht:headers', inlist: true}
                              - response['headers'].each_with_index do |header, hndx|
                                %div{typeof: header['@type']}
                                  %meta{property: 'ht:fieldValue', value: header['ht:fieldValue']}
                                  %span{property: 'ht:fieldName'}<>= header['ht:fieldName']
                                  = ': '
                                  %span{property: 'ht:headerElements', inlist: true}
                                    - header['headerElements'].each_with_index do |he, hendx|
                                      - if hendx > 0
                                        %span or
                                      %span{typeof: he['@type']}
                                        %span{property: 'ht:elementName'}<>= he['ht:elementName']
                                        - Array(he['params']).each do |param|
                                          = "; "
                                          %span{property: 'ht:params', typeof: param['@type'], inlist: true}
                                            %span{property: 'ht:paramName'}<>= param['ht:paramName']
                                            = "="
                                            %span{property: 'ht:paramValue'}<>= param['ht:paramValue']
                          - if response['ht:body']
                            %br
                            %div{property: 'ht:body', typeof: response['ht:body']['@type']}
                              %meta{property: 'cnt:characterEncoding', value: response['ht:body']['cnt:characterEncoding']}
                              %pre.code{property: 'cnt:chars'}&= response['ht:body']['cnt:chars']

    %footer
      :markdown
        [Copyright ©](http://www.w3.org/Consortium/Legal/ipr-notice#Copyright) 2015 [W3C](http://www.w3.org/)® ([MIT](http://www.csail.mit.edu/), [ERCIM](http://www.ercim.org/), [Keio](http://www.keio.ac.jp/), [Beihang](http://ev.buaa.edu.cn/)). W3C® [liability](http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer), [trademark](http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks) and [document use](http://www.w3.org/Consortium/Legal/copyright-documents) rules apply.
